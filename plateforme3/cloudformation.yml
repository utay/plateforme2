Resources:
  AdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - dynamodb:*
          - dax:*
          - application-autoscaling:DeleteScalingPolicy
          - application-autoscaling:DeregisterScalableTarget
          - application-autoscaling:DescribeScalableTargets
          - application-autoscaling:DescribeScalingActivities
          - application-autoscaling:DescribeScalingPolicies
          - application-autoscaling:PutScalingPolicy
          - application-autoscaling:RegisterScalableTarget
          - cloudwatch:DeleteAlarms
          - cloudwatch:DescribeAlarmHistory
          - cloudwatch:DescribeAlarms
          - cloudwatch:DescribeAlarmsForMetric
          - cloudwatch:GetMetricStatistics
          - cloudwatch:ListMetrics
          - cloudwatch:PutMetricAlarm
          - datapipeline:ActivatePipeline
          - datapipeline:CreatePipeline
          - datapipeline:DeletePipeline
          - datapipeline:DescribeObjects
          - datapipeline:DescribePipelines
          - datapipeline:GetPipelineDefinition
          - datapipeline:ListPipelines
          - datapipeline:PutPipelineDefinition
          - datapipeline:QueryObjects
          - ec2:DescribeVpcs
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - iam:GetRole
          - iam:ListRoles
          - sns:CreateTopic
          - sns:DeleteTopic
          - sns:ListSubscriptions
          - sns:ListSubscriptionsByTopic
          - sns:ListTopics
          - sns:Subscribe
          - sns:Unsubscribe
          - sns:SetTopicAttributes
          - lambda:CreateFunction
          - lambda:ListFunctions
          - lambda:ListEventSourceMappings
          - lambda:CreateEventSourceMapping
          - lambda:DeleteEventSourceMapping
          - lambda:GetFunctionConfiguration
          - lambda:DeleteFunction
          Effect: Allow
          Resource: "*"
        - Action:
          - iam:PassRole
          Effect: Allow
          Resource: "*"
          Condition:
            StringLike:
              iam:PassedToService:
              - application-autoscaling.amazonaws.com
              - dax.amazonaws.com
        - Effect: Allow
          Action:
          - iam:CreateServiceLinkedRole
          Resource: "*"
          Condition:
            StringEquals:
              iam:AWSServiceName:
              - replication.dynamodb.amazonaws.com
              - dax.amazonaws.com
              - dynamodb.application-autoscaling.amazonaws.com

  getClick:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      Code:
        ZipFile: >
          exports.handler = async (event) => {
              var AWS = require('aws-sdk')
              const util = require('util')
              AWS.config.update({region: 'eu-west-3', maxRetries: 1})
              const ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'})
              var params = {
                TableName: 'Clicks',
                Key: {
                  'id': {N: '1'},
                }
              };
              let response = {
                  statusCode: 200,
              };
              ddb.getPromise = util.promisify(ddb.getItem)
              try {
                  const data = await ddb.getPromise(params)
                  console.log(data.Item.nb.N)
                  response.body = JSON.stringify({ nb: data.Item.nb.N })
              } catch (err) {
                  console.log("Error", err)
                  response.statusCode = 500
                  response.data = err
              }
              return response
          };
      Description: ''
      MemorySize: 128
      Timeout: 7
      Role: !Ref AdminRole
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /getClick
            Method: ANY
        DynamoDB1:
          Type: DynamoDB
          Properties:
            Stream:
              'Fn::GetAtt':
                - Clicks
                - StreamArn
            StartingPosition: LATEST
            BatchSize: 100

  putClick:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      Code:
        ZipFile: >
          exports.handler = async (event) => {
              var AWS = require('aws-sdk')
              const util = require('util')
              AWS.config.update({region: 'eu-west-3', maxRetries: 1})
              const ddb = new AWS.DynamoDB({apiVersion: '2012-08-10'})
              const getParams = {
                TableName: 'Clicks',
                Key: {
                  'id': { N: '1' },
                }
              };
              const response = {
                  statusCode: 200,
              };
              ddb.getPromise = util.promisify(ddb.getItem)
              try {
                  let data = await ddb.getPromise(getParams)
                  const nb = parseInt(data.Item.nb.N, 10)
                  const putParams = {
                    TableName: 'Clicks',
                    Item: {
                      'id' : { N: '1' },
                      'nb' : { N: JSON.stringify(nb ? nb + 1 : 1) },
                    }
                  };
                  ddb.putPromise = util.promisify(ddb.putItem)
                  try {
                      let data = await ddb.putPromise(putParams)
                  } catch (err) {
                      console.log("Error", err)
                      response.statusCode = 500
                  }
              } catch (err) {
                  console.log("Error", err)
                  response.statusCode = 500
              }
              return response
          };
      Description: ''
      MemorySize: 128
      Timeout: 10
      Role: !Ref AdminRole
      Events:
        DynamoDB1:
          Type: DynamoDB
          Properties:
            Stream:
              'Fn::GetAtt':
                - Clicks
                - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
        Api1:
          Type: Api
          Properties:
            Path: /putClick
            Method: ANY

  Clicks:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE
